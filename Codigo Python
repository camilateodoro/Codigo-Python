import sys
import time
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QLabel
from PyQt5.QtCore import QTimer, Qt
import pyqtgraph as pg
import serial
from collections import deque
import csv
import os
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import medfilt2d

# Configurações da porta serial
porta_serial = 'COM3'
baud_rate = 115200
conexao = serial.Serial(porta_serial, baud_rate)

# Configurações do PyQt5
app = QApplication(sys.argv)
window = QMainWindow()
central_widget = QWidget()
layout = QVBoxLayout(central_widget)
window.setCentralWidget(central_widget)
plot_widget = pg.PlotWidget()
layout.addWidget(plot_widget)
window.show()
status_label = QLabel("Dados salvos: NÃO")
layout.addWidget(status_label)

# Variáveis para os dados
max_data_length = 5000  # alteração dos segundos na tabela
x_vals = deque(maxlen=max_data_length)
y_vals = deque(maxlen=max_data_length)
timestamps = deque(maxlen=max_data_length)
curve = plot_widget.plot()
plot_widget.setYRange(0, 1023)

space_pressed = False

# Função para salvar os dados
def salvar_dados(y_vals, timestamps, folder_path):
    existing_files = [name for name in os.listdir(folder_path) if name.endswith(".csv")]
    if existing_files:
        existing_numbers = [int(name.split("_")[1].split(".")[0]) for name in existing_files if
                            name.split("_")[1].split(".")[0].isdigit()]
        new_number = max(existing_numbers) + 1 if existing_numbers else 1
    else:
        new_number = 1

    first_timestamp = timestamps[0]
    standardized_timestamps = [timestamp - first_timestamp for timestamp in timestamps]

    csv_file_name = f"dados_{new_number:04d}.csv"
    csv_file_path = os.path.join(folder_path, csv_file_name)
    try:
        with open(csv_file_path, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['Tempo', 'Tensão'])
            for timestamp, value in zip(standardized_timestamps, y_vals):
                writer.writerow([timestamp, value])
        status_label.setText("Dados salvos: SIM")
        print(f"Excel salvo: {csv_file_name}")
    except Exception as e:
        print(f"Erro ao salvar os dados: {str(e)}")
        status_label.setText("Dados salvos: NÃO")


# Função para calcular a Transformada de Fourier
def calcular_transformada_de_fourier(y_vals, timestamps):
    y_vals = np.array(y_vals)
    timestamps = np.array(timestamps)

    # Padronizando o tempo
    standardized_timestamps = timestamps - timestamps[0]

    # Calculando a taxa de amostragem (frequência de amostragem)
    sampling_interval = standardized_timestamps[1] - standardized_timestamps[0]
    sampling_frequency = 1 / sampling_interval

    # Aplicando a Transformada de Fourier
    fft_vals = np.fft.fft(y_vals)
    fft_freqs = np.fft.fftfreq(len(y_vals), sampling_interval)

    # Pegando a parte positiva da frequência e magnitude
    positive_freqs = fft_freqs[:len(fft_freqs) // 2]
    positive_magnitudes = np.abs(fft_vals[:len(fft_vals) // 2])

    return positive_freqs, positive_magnitudes

# Função para calcular todas as velocidades a partir das frequências
def calcular_velocidade(positive_freqs):
    f0 = 24e9  # Frequência do radar em Hz (24 GHz)
    c = 3e8  # Velocidade da luz em m/s
    deltaf = positive_freqs
    V = (deltaf / (2 * f0)) * c
    return V

# Função para calcular a velocidade maxima a partir das frequências
def calcular_velocidademaxima(positive_freqs):
    f0 = 24e9  # Frequência do radar em Hz (24 GHz)
    c = 3e8  # Velocidade da luz em m/s
    freqmax = np.max(positive_freqs)
    Vmax = (freqmax / (2 * f0)) * c
    return Vmax

# Função para calcular a velocidade minima a partir das frequências
def calcular_velocidademinima(positive_freqs):
    f0 = 24e9  # Frequência do radar em Hz (24 GHz)
    c = 3e8  # Velocidade da luz em m/s
    freqmin = np.min(positive_freqs)
    Vmin = (freqmin / (2 * f0)) * c
    return Vmin

# Função para calcular a velocidade média a partir das frequências
def calcular_velocidademedia(positive_freqs):
    f0 = 24e9  # Frequência do radar em Hz (24 GHz)
    c = 3e8  # Velocidade da luz em m/s
    freqmed = np.mean(positive_freqs)
    Vmed = (freqmed / (2 * f0)) * c
    return Vmed

# Função para salvar os gráficos
def salvar_forma_de_onda(y_vals, timestamps, folder_path, graph_name):
    y_vals = np.array(y_vals)
    timestamps = np.array(timestamps)
    standardized_timestamps = timestamps - timestamps[0]  # Convert to seconds

    existing_files = [name for name in os.listdir(folder_path) if name.startswith(graph_name)]
    if existing_files:
        existing_numbers = [int(name.split("_")[-1].split(".")[0]) for name in existing_files if
                            name.split("_")[-1].split(".")[0].isdigit()]
        new_number = max(existing_numbers) + 1 if existing_numbers else 1
    else:
        new_number = 1

    graph_file_name = f"{graph_name}_{new_number:04d}.png"
    graph_file_path = os.path.join(folder_path, graph_file_name)

    try:
        plt.figure(figsize=(12, 40))

        # Primeiro gráfico: Forma de onda
        plt.subplot(6, 1, 1)
        plt.plot(standardized_timestamps, y_vals, color='red')
        plt.xlabel('Tempo [s]')
        plt.ylabel('Resposta do Conversor Analógico-Digital- Tensão (V)')
        plt.xlim([0, standardized_timestamps[-1]])  # Define o intervalo de tempo
        plt.ylim([0, 1000])
        plt.title('Forma de Onda [V(t)]')

        # Segundo gráfico: Transformada de Fourier (FFT)
        plt.subplot(6, 1, 2)
        positive_freqs, positive_magnitudes = calcular_transformada_de_fourier(y_vals, timestamps)
        plt.plot(positive_freqs, positive_magnitudes, color='blue')
        plt.xlabel('Frequência [Hz]')
        plt.ylabel('Magnitude - Tensão (V)')
        plt.title('Transformada Rápida de Fourier (FFT): Tensão vs Frequência [V(f)]')
        plt.grid(True)
        plt.xlim([0, positive_freqs[-1]])  # Limitar o eixo x à faixa positiva
        plt.ylim([0, 300])  # Definindo o limite do eixo Y de 0 a 10000

        # Terceiro gráfico: Velocidade em m/s a partir da FFT - Tensão X Velocidade
        plt.subplot(6, 1, 3)
        V = calcular_velocidade(positive_freqs)  # Calcula a velocidade com as frequências
        y_vals_truncated = y_vals[:len(V)]  # Trunca y_vals para o mesmo tamanho de V
        plt.plot(V, y_vals_truncated, color='purple')  # Usa y_vals_truncated como eixo X e V como eixo Y
        plt.xlabel('Velocidade (m/s)')
        plt.ylabel('Tensão (V)')
        plt.title('Tensão vs Velocidade')
        plt.grid(True)

        # Quarto gráfico: Velocidades Máxima, Mínima e Média em m/s a partir da FFT
        plt.subplot(6, 1, 4)
        Vmax = calcular_velocidademaxima(positive_freqs)
        Vmin = calcular_velocidademinima(positive_freqs)
        Vmed = calcular_velocidademedia(positive_freqs)
        V= calcular_velocidade(positive_freqs)
        plt.plot([0, max(positive_freqs)], [Vmax, Vmax], color='orange', linestyle='-', label='Velocidade Máxima')
        plt.plot([0, max(positive_freqs)], [Vmin, Vmin], color='blue', linestyle='-', label='Velocidade Mínima')
        plt.plot([0, max(positive_freqs)], [Vmed, Vmed], color='red', linestyle='-', label='Velocidade Média')
        plt.plot(positive_freqs, V, color='green')
        plt.ylabel('Velocidade [m/s]')
        plt.title('Velocidades em m/s a partir da Transformada Rápida de Fourier (FFT)')
        plt.grid(True)

        #Velocidades - TESTE
        plt.subplot(6, 1, 6)
        V = calcular_velocidade(positive_freqs)  # Calcula a velocidade com as frequências
        positive_freqs_truncated = positive_freqs[:len(V)]  # Trunca y_vals para o mesmo tamanho de V
        plt.plot(positive_freqs_truncated, V, color='purple')  # Usa y_vals_truncated como eixo X e V como eixo Y
        plt.xlabel('Frequencia (Hz)')
        plt.ylabel('Velocidade (m/s)')
        plt.title('Velocidade vs Frequencia')
        plt.grid(True)

        # Desenvolvimento completo do cálculo da velocidade
        plt.subplot(6, 1, 4)
        f0 = 24e9  # Frequência do radar em Hz (24 GHz)
        c = 3e8  # Velocidade da luz em m/s
        freqmax = np.max(positive_freqs)  # Diferença de frequência máxima
        Vmax = (freqmax / (2 * f0)) * c  # Fórmula da velocidade
        freqmin = np.min(positive_freqs)  # Diferença de frequência máxima
        Vmin = (freqmin / (2 * f0)) * c  # Fórmula da velocidade
        freqmed = np.mean(positive_freqs)  # Diferença de frequência máxima
        Vmed = (freqmed / (2 * f0)) * c  # Fórmula da velocidade
        deltaf = positive_freqs  # Diferença de frequência máxima
        V = (deltaf / (2 * f0)) * c  # Fórmula da velocidade

        # Exibindo a fórmula da velocidade
        formula_velocidade = (
            r"$V = \frac{\Delta f}{2 f_0} \cdot c$" "\n"
            f"Com: \n"
            f"Frequência central (f_0): {f0 / 1e9 :.2f} GHz\n"
            f"Velocidade da luz (c): {c:.2e} m/s\n"
            f"Δfmax (Diferença de frequência): {freqmax:.2f} Hz\n"
            f"Resultado: Vmax = {Vmax:.4f} m/s\n"
            f"Δfmin (Diferença de frequência): {freqmin:.2f} Hz\n"
            f"Resultado: Vmin = {Vmin:.4f} m/s\n"
            f"Δfmed (Diferença de frequência): {freqmed:.2f} Hz\n"
            f"Resultado: Vmed = {Vmed:.4f} m/s"
        )
        plt.text(0.5, 0.5, formula_velocidade, fontsize=12, verticalalignment='center',
                 horizontalalignment='center', transform=plt.gca().transAxes, bbox=dict(facecolor='white', alpha=0.8))

        # Fórmula matemática da Transformada de Fourier e valores utilizados
        plt.subplot(6, 1, 5)
        N = len(y_vals)
        T = standardized_timestamps[1] - standardized_timestamps[0]  # Intervalo de tempo
        yf = np.fft.fft(y_vals)
        xf = np.fft.fftfreq(N, T)[:N // 2]

        # Exibindo a fórmula matemática da Transformada de Fourier com LaTeX
        formula = (r"$X(f) = \int_{-\infty}^{\infty} x(t) e^{-j2\pi ft} dt$" "\n"
                   r"Calculado via FFT: $X_k = \sum_{n=0}^{N-1} x_n e^{-j \frac{2\pi}{N} kn}$")

        # Exibindo os valores utilizados para o cálculo
        valores_utilizados = (f"N (Número de amostras): {N}\n"
                              f"T (Intervalo de amostragem): {T:.4e} s\n"
                              f"Frequência de amostragem: {1 / T:.2f} Hz")

        # Adicionando a fórmula e os valores ao gráfico
        plt.text(0.2, 0.5, formula + "\n\n" + valores_utilizados, fontsize=12, verticalalignment='center',
                 horizontalalignment='center', transform=plt.gca().transAxes, bbox=dict(facecolor='white', alpha=0.8))

        # Desenvolvimento completo do cálculo de FFT
        plt.subplot(6, 1, 5)
        desenvolvimentos = []
        for k in range(N // 2):  # Para cada frequência
            soma_complexa = np.sum(y_vals * np.exp(-2j * np.pi * k * np.arange(N) / N))
            desenvolvimentos.append(f"X[{k}] = Σ x[n] * e^(-j 2π {k} n / {N}) = {soma_complexa:.4f}")

        # Exibindo o desenvolvimento completo em texto no gráfico
        desenvolvimentos_texto = "\n".join(desenvolvimentos[:10])  # Exibir só os 10 primeiros valores
        plt.text(0.6, 0.5, desenvolvimentos_texto, fontsize=10, verticalalignment='center',
                 horizontalalignment='center', transform=plt.gca().transAxes, bbox=dict(facecolor='white', alpha=0.8))
        plt.title("Desenvolvimento Completo do Cálculo da FFT (10 primeiros valores)")

        #Salvar gráfico
        plt.tight_layout()
        plt.savefig(graph_file_path)
        plt.close()
        print(f"Gráfico salvo: {graph_file_name}")
    except Exception as e:
        print(f"Erro ao salvar o gráfico: {str(e)}")

def update_plot():
    curve.setData(list(range(len(y_vals))), y_vals)

def read_data():
    try:
        while conexao.in_waiting > 0:
            dados = conexao.readline().decode('latin1').strip()  # Decodificar utilizando latin1
            try:
                valor = float(dados)
                timestamp = time.time()
                x_vals.append(timestamp)
                y_vals.append(valor)
                timestamps.append(timestamp)
            except ValueError:
                pass
        if x_vals:
            update_plot()
    except KeyboardInterrupt:
        print("Leitura de dados interrompida")

def keyReleaseEvent(event):
    global space_pressed
    if event.key() == Qt.Key_Space:
        space_pressed = False
        print("Botão de espaço liberado")
        if y_vals:
            # Salvando os dados e gráficos
            salvar_dados(list(y_vals), list (timestamps),r"C:\Users\Camila\Desktop\Nova pasta" )
            salvar_forma_de_onda(list(y_vals), list(timestamps), r"C:\Users\Camila\Desktop\Nova pasta",
                                               "Movimento")
        else:
            print("Nenhum dado disponível para salvar")

window.keyReleaseEvent = keyReleaseEvent

timer = QTimer()
timer.timeout.connect(read_data)
timer.start(50)

sys.exit(app.exec_())
